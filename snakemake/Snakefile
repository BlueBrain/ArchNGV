import os
import datetime


BIONAME = os.path.realpath(config.get('bioname', 'bioname'))

LOGS_DIR = 'logs'

MORPH_DIR = 'morphologies'


def bioname_path(filename):
    return os.path.join(BIONAME, filename)


def log_path(name):
    timestamp = datetime.datetime.now().strftime("%Y%m%dT%H%M%S")
    return os.path.abspath(os.path.join(LOGS_DIR, "%s.%s.log" % (name, timestamp)))


# Load MANIFEST.yaml into workflow config
workflow.configfile(bioname_path('MANIFEST.yaml'))


ATLAS = config['common']['atlas']
ATLAS_CACHE_DIR = ".atlas"
VASCULATURE = config['common']['vasculature']

BASE_CIRCUIT_SONATA = config['common']['base_circuit_sonata']
BASE_CIRCUIT_CELLS = config['common']['base_circuit_cells']
BASE_CIRCUIT_CONNECTOME = config['common']['base_circuit_connectome']

NGV_APP = 'ngv -v {cmd}'


rule default:
    input:
        'cell_data.h5',
        'microdomains/overlapping_structure.h5',
        'gliovascular_connectivity.h5',
        'gliovascular_data.h5',
        'endfeetome.h5',
        MORPH_DIR + '/_DONE',
        'ngv_config.json',


rule sonata:
    input:
        'sonata/nodes/glia.h5',
        'sonata/edges/neuroglial.h5',


rule cell_placement:
    output:
        'cell_data.h5'

    log:
        log_path('cell_placement')

    shell:
        ' '.join([
            NGV_APP.format(cmd='cell-placement'),
                '--config',
                    bioname_path('cell_placement.yaml'),
                '--atlas',
                    ATLAS,
                '--atlas-cache',
                    ATLAS_CACHE_DIR,
                '--vasculature',
                    VASCULATURE,
                '--output',
                    '{output}',
                '2>&1 | tee {log}'
        ])


rule microdomains:
    input:
        'cell_data.h5'

    output:
        'microdomains/structure.h5',
        'microdomains/structure_global.h5',
        'microdomains/tesselation.stl',
        'microdomains/overlapping_structure.h5',
        'microdomains/overlapping_structure_global.h5',
        'microdomains/overlapping_tesselation.stl',

    log:
        log_path('microdomains')

    shell:
        ' '.join([
            NGV_APP.format(cmd='microdomains'),
                '--config',
                    bioname_path('microdomains.yaml'),
                '--cell-data',
                    '{input}',
                '--atlas',
                    ATLAS,
                '--atlas-cache',
                    ATLAS_CACHE_DIR,
                '--output-dir',
                    'microdomains',
                '2>&1 | tee {log}'
        ])


rule gliovascular_connectivity:
    input:
        cell_data = 'cell_data.h5',
        microdomains = 'microdomains/overlapping_structure.h5',

    output:
        data = 'gliovascular_data.h5',
        connectivity = 'gliovascular_connectivity.h5',

    log:
        log_path('gliovascular_connectivity')

    shell:
        ' '.join([
            NGV_APP.format(cmd='gliovascular-connectivity'),
                '--config',
                    bioname_path('gliovascular_connectivity.yaml'),
                '--cell-data',
                    '{input[cell_data]}',
                '--microdomains',
                    '{input[microdomains]}',
                '--vasculature',
                    VASCULATURE,
                '--output-data',
                    '{output[data]}',
                '--output-connectivity',
                    '{output[connectivity]}',
                '2>&1 | tee {log}'
        ])


rule neuroglial_connectivity:
    input:
        astrocytes = 'sonata/nodes/glia.h5',
        microdomains = 'microdomains/overlapping_structure.h5',

    output:
        'sonata.tmp/edges/neuroglial.h5.connectivity',

    log:
        log_path('neuroglial_connectivity')

    shell:
        ' '.join([
            NGV_APP.format(cmd='neuroglial connectivity'),
                '--neurons',
                    BASE_CIRCUIT_CELLS,
                '--astrocytes',
                    '{input[astrocytes]}',
                '--microdomains',
                    '{input[microdomains]}',
                '--synaptic-data',
                    BASE_CIRCUIT_CONNECTOME,
                '--output',
                    '{output}',
                '2>&1 | tee {log}'
        ])


rule synthesis:
    input:
        cell_data = 'cell_data.h5',
        microdomains = 'microdomains/overlapping_structure.h5',
        gliovascular_connectivity = 'gliovascular_connectivity.h5',
        gliovascular_data = 'gliovascular_data.h5',
        neuroglial_connectivity = 'sonata.tmp/edges/neuroglial.h5.connectivity',

    output:
        touch(MORPH_DIR + '/_DONE'),

    log:
        log_path('synthesis')

    shell:
        ' '.join([
            NGV_APP.format(cmd='synthesis'),
                '--config',
                    bioname_path('synthesis.yaml'),
                '--tns-distributions',
                    bioname_path('tns_distributions.json'),
                '--tns-parameters',
                    bioname_path('tns_parameters.json'),
                '--cell-data',
                    '{input[cell_data]}',
                '--microdomains',
                    '{input[microdomains]}',
                '--gliovascular-connectivity',
                    '{input[gliovascular_connectivity]}',
                '--gliovascular-data',
                    '{input[gliovascular_data]}',
                '--neuroglial-connectivity',
                    '{input[neuroglial_connectivity]}',
                '--synaptic-data',
                    BASE_CIRCUIT_CONNECTOME,
                '--out-morph-dir',
                    MORPH_DIR,
                '--parallel',
                '2>&1 | tee {log}'
        ])


rule endfeet_area:
    input:
        gliovascular_connectivity = 'gliovascular_connectivity.h5',
        gliovascular_data = 'gliovascular_data.h5',

    output:
        'endfeetome.h5'

    log:
        log_path('endfeet_area')

    shell:
        ' '.join([
            NGV_APP.format(cmd='endfeet-area'),
                '--config',
                    bioname_path('endfeet_area.yaml'),
                '--vasculature-mesh',
                    config['common']['vasculature_mesh'],
                '--gliovascular-connectivity',
                    '{input[gliovascular_connectivity]}',
                '--gliovascular-data',
                    '{input[gliovascular_data]}',
                '--output',
                    '{output}',
                '2>&1 | tee {log}'
        ])


rule cell_data_sonata:
    input:
        'cell_data.h5',

    output:
        'sonata.tmp/nodes/glia.h5.somata'

    shell:
        ' '.join([
            NGV_APP.format(cmd='convert cell-data'),
                '--input',
                    '{input}',
                '--output',
                    '{output}'
        ])


rule assign_emodels:
    input:
        'sonata.tmp/nodes/glia.h5.somata'

    output:
        'sonata/nodes/glia.h5'

    shell:
        ' '.join([
            NGV_APP.format(cmd='assign-emodels'),
                '--input',
                    '{input}',
                '--output',
                    '{output}',
                '--hoc',
                    config['assign_emodels']['hoc_template'],
        ])


rule neuroglial_bind_annotations:
    input:
        connectivity = 'sonata.tmp/edges/neuroglial.h5.connectivity',
        astrocytes = 'sonata.tmp/nodes/glia.h5.somata',
        morphologies = MORPH_DIR + '/_DONE',

    output:
        'sonata/edges/neuroglial.h5'

    shell:
        ' '.join([
            NGV_APP.format(cmd='neuroglial bind-annotations'),
                '--input',
                    '{input[connectivity]}',
                '--astrocytes',
                    '{input[astrocytes]}',
                '--annotation-dir',
                    MORPH_DIR,
                '--output',
                    '{output}'
        ])


rule ngv_config:
    output:
        'ngv_config.json'

    shell:
        ' '.join([
            NGV_APP.format(cmd='convert ngv-config'),
                '.',
                '--bioname',
                    BIONAME,
                '--output',
                    '{output}',
        ])
