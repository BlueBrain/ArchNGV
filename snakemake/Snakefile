import os
import yaml
import datetime
import itertools as it

BIONAME = os.path.realpath(config.get('bioname', 'bioname'))

LOGS_DIR = 'logs'

MORPH_DIR = 'morphologies'


def _get_seed(manifest_path):
    """Get the seed from the manifest"""
    try:
        with open(manifest_path, 'r') as stream:
            manifest = yaml.safe_load(stream)
            return str(manifest['common']['seed'])
    except KeyError:
        return "0"


def bioname_path(filename):
    return os.path.join(BIONAME, filename)


def log_path(name):
    timestamp = datetime.datetime.now().strftime("%Y%m%dT%H%M%S")
    return os.path.abspath(os.path.join(LOGS_DIR, "%s.%s.log" % (name, timestamp)))


def escape_single_quotes(value):
    return value.replace("'", "'\\''")

MANIFEST = bioname_path('MANIFEST.yaml')
SEED = _get_seed(MANIFEST)


# Load MANIFEST.yaml into workflow config
workflow.configfile(MANIFEST)


ATLAS = config['common']['atlas']
ATLAS_CACHE_DIR = ".atlas"
VASCULATURE = config['common']['vasculature']

BASE_CIRCUIT_SONATA = config['common']['base_circuit_sonata']
BASE_CIRCUIT_CELLS = config['common']['base_circuit_cells']
BASE_CIRCUIT_CONNECTOME = config['common']['base_circuit_connectome']
BUILDER_RECIPE = bioname_path('astrocyte_gap_junction_recipe.xml')

NGV_APP = 'ngv -v {cmd} '
PARALLEL = True

SPACK_MODULEPATH = "/gpfs/bbp.cscs.ch/ssd/apps/hpc/jenkins/modules/all"

MODULES = {
    'glial_gap_junctions':
        (SPACK_MODULEPATH, ['archive/2019-12', 'touchdetector/5.3.2']),
    'glialglial_connectivity':
        (SPACK_MODULEPATH, ['archive/2019-12', 'py-pytouchreader/1.4.3/python3'])
}

TOUCHES_DIR = 'connectome/touches'


def propagate_cluster_default_values():
    # propagate the missing options from the default
    slurm_envs = set(cluster_config.keys()) - {'__default__'}
    default = cluster_config['__default__']
    for slurm_env in slurm_envs:
        slurm_dict = cluster_config[slurm_env]
        missing_keys = set(default.keys()) -  set(slurm_dict.keys())
        slurm_dict.update({key: default[key] for key in missing_keys})


def salloc_cmd(slurm_env):
    if (slurm_env is not None) and cluster_config:
        if slurm_env not in cluster_config:
            slurm_env = '__default__'

        cfg = cluster_config[slurm_env]
        salloc_options = '-C {constraint} -A {account} -N {nodes} -n {tasks} -p {partition} -J {jobname} -t {time}'.format(
            constraint=cfg['constraint'],
            account=cfg['account'],
            nodes=cfg['nodes'],
            tasks=cfg['tasks'],
            partition=cfg['partition'],
            jobname=cfg['jobname'],
            time=cfg['time'],
        )
        return "salloc {salloc_options}".format(salloc_options=salloc_options)
    return ""


def modules_cmd(module_env):
    if module_env is not None:
        modulepath, modules = MODULES[module_env]
        return " && ".join([
            "export MODULEPATH=%s" % modulepath,
            ". /etc/profile.d/modules.sh",
            "module purge",
            "module load %s" % " ".join(modules),
            "echo MODULEPATH=%s" % modulepath,
            "module list", " "
            ])
    return ""


def srun_cmd(skip_srun, mpi_opt):
    if not skip_srun:
        return "srun {mpi} sh -c".format(
                mpi=('' if mpi_opt is None else '--mpi={}'.format(mpi_opt)),
            )
    return ""


def bbp_env(module_env, command, dump_log=False, slurm_env=None, skip_srun=False, mpi_opt=None):

    result = "{module} {salloc} {srun} \'{command}\'"
    result = result.format(module=modules_cmd(module_env),
                            salloc=salloc_cmd(slurm_env),
                            srun= srun_cmd(skip_srun, mpi_opt),
                            command=" ".join(map(str, command)))
    if dump_log:
        result += " 2>&1 | tee {log}"
    return result


def ngv_run(command, args, module_env=None, dump_log=False):
    """
    Args:
        command: ngv command
        args: arguments for ngv command
        module_env: modules specified for this command in MODULES
        dump_log: produce log
    """

    result = '{module_setup} {cmd}{args}'.format(
        module_setup=modules_cmd(module_env),
        cmd=NGV_APP.format(cmd=command),
        args=' '.join(args)
    )

    if dump_log:
        result += " 2>&1 | tee {log}"

    return result


propagate_cluster_default_values()  #  cluster info propagation does not work so doing it here


rule all:
    input:
        'cell_data.h5',
        'microdomains/overlapping_microdomains.h5',
        'gliovascular_connectivity.h5',
        'gliovascular_data.h5',
        'endfeet_areas.h5',
        MORPH_DIR + '/_DONE',
        TOUCHES_DIR + '/_SUCCESS',
        'ngv_config.json',
        'sonata/nodes/glia.h5',
        'sonata/edges/neuroglial.h5',
        'sonata/edges/glialglial.h5',
        'astrocyte_annotations.h5'


rule sonata:
    input:
        'sonata/nodes/glia.h5',
        'sonata/edges/neuroglial.h5',


rule cell_placement:
    output:
        'cell_data.h5'

    log:
        log_path('cell_placement')

    shell:
        ngv_run('cell-placement',
                [
                '--config',
                    bioname_path('cell_placement.yaml'),
                '--atlas',
                    ATLAS,
                '--atlas-cache',
                    ATLAS_CACHE_DIR,
                '--vasculature',
                    VASCULATURE,
                '--output',
                    '{output}',
                '--seed',
                    SEED,
                ],
                dump_log='{log}'
        )


rule microdomains:
    input:
        'cell_data.h5'

    output:
        'microdomains/microdomains.h5',
        'microdomains/overlapping_microdomains.h5',

    log:
        log_path('microdomains')

    shell:
        ngv_run('microdomains',
                [
                '--config',
                    bioname_path('microdomains.yaml'),
                '--cell-data',
                    '{input}',
                '--atlas',
                    ATLAS,
                '--atlas-cache',
                    ATLAS_CACHE_DIR,
                '--output-dir',
                    'microdomains',
                '--seed',
                    SEED,
                ],
                dump_log='{log}'
        )


rule gliovascular_connectivity:
    input:
        cell_data = 'cell_data.h5',
        microdomains = 'microdomains/overlapping_microdomains.h5',

    output:
        data = 'gliovascular_data.h5',
        connectivity = 'gliovascular_connectivity.h5',

    log:
        log_path('gliovascular_connectivity')

    shell:
        ngv_run('gliovascular-connectivity',
                [
                '--config',
                    bioname_path('gliovascular_connectivity.yaml'),
                '--cell-data',
                    '{input[cell_data]}',
                '--microdomains',
                    '{input[microdomains]}',
                '--vasculature',
                    VASCULATURE,
                '--output-data',
                    '{output[data]}',
                '--output-connectivity',
                    '{output[connectivity]}',
                '--seed',
                    SEED
                ],
                dump_log='{log}'
        )


rule neuroglial_connectivity:
    input:
        astrocytes = 'sonata/nodes/glia.h5',
        microdomains = 'microdomains/overlapping_microdomains.h5',

    output:
        'sonata.tmp/edges/neuroglial.h5.connectivity',

    log:
        log_path('neuroglial_connectivity')

    shell:
        ngv_run('neuroglial connectivity',
                [
                '--neurons',
                    BASE_CIRCUIT_CELLS,
                '--astrocytes',
                    '{input[astrocytes]}',
                '--microdomains',
                    '{input[microdomains]}',
                '--synaptic-data',
                    BASE_CIRCUIT_CONNECTOME,
                '--output',
                    '{output}',
                '--seed',
                    SEED,
                ],
                dump_log='{log}'
        )

rule glial_gap_junctions:
    message:
        "Detect touches between astrocytes"

    input:
        astrocytes = 'sonata/nodes/glia.h5',
        morphologies = MORPH_DIR + '/_DONE'

    output:
        touch(TOUCHES_DIR + '/_SUCCESS')

    log:
        log_path('touchdetector')

    shell:
        bbp_env('glial_gap_junctions',
                ["touchdetector",
                "--output",
                    "{TOUCHES_DIR}",
                "--save-state",
                "--from {input[astrocytes]} astrocytes",
                "--to {input[astrocytes]} astrocytes",
                "{BUILDER_RECIPE}",
                "{MORPH_DIR}",
            ],
            dump_log=True,
            slurm_env='glial_gap_junctions',
            mpi_opt='pmi2')


rule glialglial_connectivity:
    message:
        " Extract glial glial connectivity from touches"

    input:
        cell_data = 'cell_data.h5',
        touches = TOUCHES_DIR + '/_SUCCESS'

    output:
        connectivity = 'sonata/edges/glialglial.h5'

    log:
        log_path('glialglial_connectivity')

    shell:
        ngv_run('glialglial-connectivity',
                [
                '--cell-data',
                    '{input[cell_data]}',
                '--touches-dir',
                    '{TOUCHES_DIR}',
                '--output-connectivity',
                    '{output[connectivity]}'
                ],
                module_env='glialglial_connectivity',
                dump_log='{log}')


rule endfeet_area:
    input:
        gliovascular_data = 'gliovascular_data.h5',

    output:
        'endfeet_areas.h5'

    log:
        log_path('endfeet_area')

    shell:
        ngv_run('endfeet-area',
                [
                '--config',
                    bioname_path('endfeet_area.yaml'),
                '--vasculature-mesh',
                    config['common']['vasculature_mesh'],
                '--gliovascular-data',
                    '{input[gliovascular_data]}',
                '--output',
                    '{output}',
                '--seed',
                    SEED
                ],
                dump_log='{log}'
        )


rule synthesis:
    input:
        cell_data = 'cell_data.h5',
        microdomains = 'microdomains/overlapping_microdomains.h5',
        gliovascular_connectivity = 'gliovascular_connectivity.h5',
        gliovascular_data = 'gliovascular_data.h5',
        neuroglial_connectivity = 'sonata.tmp/edges/neuroglial.h5.connectivity',
        endfeet_areas = 'endfeet_areas.h5'

    output:
        touch(MORPH_DIR + '/_DONE'),

    log:
        log_path('synthesis')

    shell:
        ngv_run('synthesis',
                [
                '--config',
                    bioname_path('synthesis.yaml'),
                '--tns-distributions',
                    bioname_path('tns_distributions.json'),
                '--tns-parameters',
                    bioname_path('tns_parameters.json'),
                '--tns-context',
                    bioname_path('tns_context.json'),
                '--cell-data',
                    '{input[cell_data]}',
                '--microdomains',
                    '{input[microdomains]}',
                '--gliovascular-connectivity',
                    '{input[gliovascular_connectivity]}',
                '--gliovascular-data',
                    '{input[gliovascular_data]}',
                '--neuroglial-connectivity',
                    '{input[neuroglial_connectivity]}',
                '--endfeet-areas',
                    '{input[endfeet_areas]}',
                '--synaptic-data',
                    BASE_CIRCUIT_CONNECTOME,
                '--out-morph-dir',
                    MORPH_DIR,
                ('--parallel' if PARALLEL else ''),
                '--seed',
                    SEED
                ],
                dump_log='{log}'
        )


rule annotations_and_properties:
    input:
        cell_data = 'cell_data.h5',
        microdomains = 'microdomains/overlapping_microdomains.h5',
        gliovascular_connectivity = 'gliovascular_connectivity.h5',
        gliovascular_data = 'gliovascular_data.h5',
        neuroglial_connectivity = 'sonata.tmp/edges/neuroglial.h5.connectivity',
        endfeet_areas = 'endfeet_areas.h5',
        morphologies = MORPH_DIR + '/_DONE',

    output:
        properties = 'astrocyte_properties.h5',
        annotations = 'astrocyte_annotations.h5'

    log:
        log_path('annotations_and_properties')

    shell:
        ngv_run('annotations_and_properties',
                [
                '--config',
                    bioname_path('synthesis.yaml'),
                '--cell-data',
                    '{input[cell_data]}',
                '--microdomains',
                    '{input[microdomains]}',
                '--gliovascular-connectivity',
                    '{input[gliovascular_connectivity]}',
                '--gliovascular-data',
                    '{input[gliovascular_data]}',
                '--neuroglial-connectivity',
                    '{input[neuroglial_connectivity]}',
                '--endfeet-areas',
                    '{input[endfeet_areas]}',
                '--synaptic-data',
                    BASE_CIRCUIT_CONNECTOME,
                '--morph-dir',
                    MORPH_DIR,
                '--annotations_output',
                    '{output[annotations]}',
                '--properties_output',
                    '{output[properties]}',
                ('--parallel' if PARALLEL else ''),
                '--seed',
                    SEED,
                ],
                dump_log='{log}'
        )


rule cell_data_sonata:
    input:
        'cell_data.h5',

    output:
        'sonata.tmp/nodes/glia.h5.somata'

    shell:
        ngv_run('convert cell-data',
                [
                '--input',
                    '{input}',
                '--output',
                    '{output}'
                ]
        )


rule assign_emodels:
    input:
        'sonata.tmp/nodes/glia.h5.somata'

    output:
        'sonata/nodes/glia.h5'

    shell:
        ngv_run('assign-emodels',
                [
                '--input',
                    '{input}',
                '--output',
                    '{output}',
                '--hoc',
                    config['assign_emodels']['hoc_template'],
                ]
        )


rule neuroglial_bind_annotations:
    input:
        connectivity = 'sonata.tmp/edges/neuroglial.h5.connectivity',
        astrocytes = 'sonata.tmp/nodes/glia.h5.somata',
        morphologies = MORPH_DIR + '/_DONE',
        annotations= 'astrocyte_annotations.h5',

    output:
        'sonata/edges/neuroglial.h5'

    shell:
        ngv_run('neuroglial bind-annotations',
                [
                '--input',
                    '{input[connectivity]}',
                '--astrocytes',
                    '{input[astrocytes]}',
                '--annotations',
                    '{input[annotations]}',
                '--output',
                    '{output}'
                ]
        )


rule ngv_config:
    output:
        'ngv_config.json'

    shell:
        ngv_run('convert ngv-config',
                [
                '.',
                '--bioname',
                    BIONAME,
                '--output',
                    '{output}',
                ]
        )
